# -*- coding: utf-8 -*-
"""Nobul Bert Model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-tWuIAZQLMOu540pLuOBWphakQ1pn2va
"""

import pickle
import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_text as text
import pandas as pd
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.metrics import classification_report, confusion_matrix


def load_data(path)->pd.DataFrame:
  # load the data
  file = open(path, 'rb')
  data = pickle.load(file)
  return data


def clean_data(df)->pd.DataFrame:
  df['category']=df['label'].apply(lambda x: 0 if x=='fly_fishing' else(1 if x=='ice_hockey' else 2))
  return df

def split_data(df)->pd.DataFrame:
  X = df['body_basic']
  y = df['category']
  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.1)
  return X_train, X_test, y_train, y_test


def bert_model():
  bert_preprocess = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3")
  bert_encoder = hub.KerasLayer("https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/4")
  text_input = tf.keras.layers.Input(shape=(), dtype=tf.string, name='text')
  preprocessed_text = bert_preprocess(text_input)
  outputs = bert_encoder(preprocessed_text)
  l = tf.keras.layers.Dropout(0.1, name="dropout")(outputs['pooled_output'])
  l = tf.keras.layers.Dense(1, activation='sigmoid', name="output")(l)
  model = tf.keras.Model(inputs=[text_input], outputs = [l])

  return model

def train_model(model,X_train, y_train):
  
  METRICS = [
            tf.keras.metrics.BinaryAccuracy(name='accuracy'),
            tf.keras.metrics.Precision(name='precision'),
            tf.keras.metrics.Recall(name='recall')]

  model.compile(optimizer='adam',loss='binary_crossentropy',metrics=METRICS)
  model.fit(X_train, y_train, epochs=1)
  model.save('saved_model/bert_model')


def make_predictions(model_path,X_test, y_test):
  loaded_model = tf.keras.models.load_model(model_path)
  y_predicted=loaded_model.predict(X_test)
  y_predicted = y_predicted.flatten()
  y_predicted = np.where(y_predicted > 0.5, 1, 0)
  report=classification_report(y_test, y_predicted)
  return report


if __name__ == "__main__":

    df=load_data('data.pkl')
              
    df=clean_data(df)

    X_train, X_test, y_train, y_test=split_data(df)

    model=bert_model()

    train_model(model,X_train, y_train)
    
    print(make_predictions('saved_model/bert_model',X_test, y_test))